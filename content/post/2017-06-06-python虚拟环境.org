#+TITLE: Python 虚拟环境
#+DATE: 2017-06-06
#+SETUPFILE: /home/huaming_li/github/blog/setupfile.org
#+LAYOUT: post
#+CATEGORIES: summary
#+TAGS: python
#+PUBLISHED: true

* Virtualenv
** Introduction
virtualenv is a tool to create isolated Python environments.
** Installation

   #+BEGIN_SRC sh
     sudo pip install virtualenv
   #+END_SRC
{{{more}}}
** Usage
1.为一个工程创建一个虚拟环境：

#+BEGIN_SRC sh
  cd my_project_folder
  virtualenv venv
#+END_SRC
virtualenv venv 将会在当前的目录中创建一个文件夹，包含了 Python 可执行文件，以及 pip 库的一份拷贝，这样就能安装其他包了。虚拟环境的名字（此例中是 venv）可以是任意的；若省略名字将会把文件均放在当前目录。

在任何你运行命令的目录中，这会创建 Python 的拷贝，并将之放在叫做 venv 的文件中。

你可以选择使用一个 Python 解释器：

#+BEGIN_SRC sh
  virtualenv -p /usr/bin/python2.7 venv
#+END_SRC
这将会使用 /usr/bin/python2.7 中的 Python 解释器。
2.要开始使用虚拟环境，其需要被激活：

#+BEGIN_SRC sh
  source venv/bin/activate
#+END_SRC
从现在起，任何你使用 pip 安装的包将会放在 ``venv 文件夹中，与全局安装的 Python 隔绝开
3.如果你在虚拟环境中暂时完成了工作，则可以停用它：

#+BEGIN_SRC sh
  deactivate
#+END_SRC
要删除一个虚拟环境，只需删除它的文件夹。（要这么做请执行 rm -rf venv）
4.其他注意
运行带 --no-site-packages 选项的 virtualenv 将不会包括全局安装的包。这可用于保持包列表干净，以防以后需要访问它。
详细命令：https://virtualenv.pypa.io/en/latest/reference/

* virtualenvwrapper
virtualenvwrapper 提供了一系列命令使得和虚拟环境工作变得愉快许多。它把你所有的虚拟环境都放在一个地方。

#+BEGIN_SRC sh
  pip install virtualenvwrapper
  export WORKON_HOME=~/Envs
  source /usr/local/bin/virtualenvwrapper.sh
#+END_SRC
基本使用

#+BEGIN_SRC sh
  mkvirtualenv venv
  workon venv
  deactivate
  rmvirtualenv venv

  mkproject myproject
#+END_SRC
其他有用的命令
lsvirtualenv
列举所有的环境。
cdvirtualenv
导航到当前激活的虚拟环境的目录中，比如说这样你就能够浏览它的 site-packages。
cdsitepackages
和上面的类似，但是是直接进入到 site-packages 目录中。
lssitepackages
显示 site-packages 目录中的内容。

* autoenv
autoen 可自动加载环境变量

#+BEGIN_SRC sh
  sudo pip install autoenv
  source ~/.bashrc
  touch .env
#+END_SRC


* Python3
**  pre install
   1. install sqlite to solve virtualenv: ImportError: No module named _sqlite3
   #+BEGIN_SRC sh
	 sudo yum install sqlite sqlite-devel  openssl-devel 

   #+END_SRC
   2. install tkinter

  #+BEGIN_SRC sh
sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '%{rhel}').noarch.rpm
	yum -y install tkinter tcl-devel tk-devel
	wget https://centos7.iuscommunity.org/ius-release.rpm
	sudo rpm -Uvh ius-release*rpm
	sudo yum install python36u-tkinter
  #+END_SRC
3. yum install bzip2-devel
** Install pip for Python 3:

#+BEGIN_SRC sh
  wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tar.xz 
  tar --xz -xvf Python-3.6.5.tar.xz
  sudo ./configure --prefix=/usr/local/python3
  sudo make && sudo make install
  sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3
#+END_SRC
** Install pip3

   #+BEGIN_SRC sh
     wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz
     tar -zvxf 9.0.1.tar.gz
     cd pip-9.0.1/
     sudo python3  setup.py install
     sudo ln -s /usr/local/python3/bin/pip /usr/bin/pip3
   #+END_SRC

** virtualenv && virtualenvwrapper
install autoenv

#+BEGIN_SRC sh
sudo pip install autoenv
echo "source `which activate.sh`" >> ~/.bashrc
#+END_SRC
install virtualenv and virtualenvwrapper

#+BEGIN_SRC sh
  sudo pip3 install virtualenv
  sudo pip3 install virtualenvwrapper

#+END_SRC

Create a folder for your virtualenvs (~/.virtualenvs) and set it as WORKON_HOME:

#+BEGIN_SRC sh
  mkdir ~/.virtualenvs
#+END_SRC
Add the following lines to ~/.bashrc:

#+BEGIN_SRC sh
  export WORKON_HOME=~/.virtualenvs
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 # This needs to be placed before the virtualenvwrapper command
  export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python3/bin/virtualenv
  source /usr/local/python3/bin/virtualenvwrapper.sh
#+END_SRC
Close and re-open your shell and you're ready to go. Here are the basic commands for using virtualenvwrapper:

#+BEGIN_SRC sh
  mkvirtualenv virtualenv_name # Create virtualenv
  workon virtualenv_name # Activate/switch to a virtualenv
  deactivate virtualenv_name # Deactivate virtualenv
#+END_SRC

** 注意点
   1. 在运行 workon 指定 python 版本时，如果是 2 与 3 版本之间的切换则需要修改/usr/bin/python
   2. yum 的功能依赖 Python2 更改 3 后需要做如下修改：

   #+BEGIN_SRC sh
     vi /usr/bin/yum
   #+END_SRC
打开文件，修改第一行为：

#+BEGIN_SRC sh
  #!/usr/bin/python2.7
#+END_SRC
   3. window 中使用 virtualenvwrapper-win 安装，同时可用 setprojectdir . 来设置项目的根目录，这样一运行 workon 直接跳到根目录
